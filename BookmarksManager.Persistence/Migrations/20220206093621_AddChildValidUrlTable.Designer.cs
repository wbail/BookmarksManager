// <auto-generated />
using System;
using BookmarksManager.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookmarksManager.Persistence.Migrations
{
    [DbContext(typeof(BookmarksManagerDbContext))]
    [Migration("20220206093621_AddChildValidUrlTable")]
    partial class AddChildValidUrlTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("BookmarksManager.Domain.Entities.BookmarkBar", b =>
                {
                    b.Property<string>("DateAdded")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateModified")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("BookmarkBar");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Child", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncedId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("SyncedId");

                    b.ToTable("Child");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.ChildValidUrl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildValidUrl");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.MetaInfo", b =>
                {
                    b.Property<string>("LastVisitedDesktop")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("MetaInfo");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Other", b =>
                {
                    b.Property<string>("DateAdded")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateModified")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Other");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Root", b =>
                {
                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncMetadata")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.ToTable("Root");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Roots", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.ToTable("Roots");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Synced", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Synced");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8148ea9-5ba7-49d3-b6b3-d5a7653ce105"),
                            Password = "test7",
                            Role = "default",
                            Username = "test"
                        });
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Child", b =>
                {
                    b.HasOne("BookmarksManager.Domain.Entities.Child", null)
                        .WithMany("Children")
                        .HasForeignKey("ChildId");

                    b.HasOne("BookmarksManager.Domain.Entities.Synced", "Synced")
                        .WithMany("Children")
                        .HasForeignKey("SyncedId");

                    b.Navigation("Synced");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.ChildValidUrl", b =>
                {
                    b.HasOne("BookmarksManager.Domain.Entities.Child", "Child")
                        .WithMany("ChildValidUrl")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Child", b =>
                {
                    b.Navigation("ChildValidUrl");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("BookmarksManager.Domain.Entities.Synced", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
